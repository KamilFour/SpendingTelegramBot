import sqlite3
import matplotlib.pyplot as plt
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, ConversationHandler, MessageHandler, Filters

# Conversation states
CATEGORY, AMOUNT = range(2)


def start(update, context):
    categories = [[InlineKeyboardButton("üçî –†–µ—Å—Ç–æ—Ä–∞–Ω—ã", callback_data='–†–µ—Å—Ç–æ—Ä–∞–Ω—ã'),
                   InlineKeyboardButton("üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data='–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç')],
                  [InlineKeyboardButton("üí°üíßüè† –ö–£", callback_data='–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏'),
                   InlineKeyboardButton("üõç –ü—Ä–æ–¥—É–∫—Ç—ã", callback_data='–ü—Ä–æ–¥—É–∫—Ç—ã')],
                  [InlineKeyboardButton("üëï –û–¥–µ–∂–¥–∞", callback_data='–û–¥–µ–∂–¥–∞'),
                   InlineKeyboardButton("üë∂ –†–µ–±—ë–Ω–∫—É", callback_data='–†–µ–±—ë–Ω–∫—É')],
                  [InlineKeyboardButton("üíÑ –ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ", callback_data='–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ'),
                   InlineKeyboardButton("üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", callback_data='–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è')],
                  [InlineKeyboardButton("üí∏ –ù–∞–ª–æ–≥–∏ –∏ –î–æ–ª–≥–∏", callback_data='–ù–∞–ª–æ–≥–∏ –∏ –î–æ–ª–≥–∏'),
                   InlineKeyboardButton("üì¶ –î—Ä—É–≥–æ–µ", callback_data='–î—Ä—É–≥–æ–µ')],
                  [InlineKeyboardButton("–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã", callback_data='–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã')]]
    reply_markup = InlineKeyboardMarkup(categories)
    update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤:', reply_markup=reply_markup)

    return CATEGORY


def amount(update, context):
    amount = update.message.text
    category = context.user_data['category']

    # Write the spending record to the database
    conn = sqlite3.connect('expenses.db')
    c = conn.cursor()
    c.execute("INSERT INTO expenses (category, amount) VALUES (?, ?)", (category, amount))
    conn.commit()
    conn.close()

    context.bot.send_message(chat_id=update.effective_chat.id, text='–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!')

    return ConversationHandler.END


def button(update, context):
    query = update.callback_query

    if query.data == '–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã':
        view_expenses(update, context)
        return ConversationHandler.END
    else:
        context.user_data['category'] = query.data
        query.answer()
        context.bot.send_message(chat_id=update.effective_chat.id, text='–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã:')
        return AMOUNT


def view_expenses(update, context):
    # Retrieve the spending data from the database
    conn = sqlite3.connect('expenses.db')
    c = conn.cursor()
    c.execute("SELECT category, SUM(amount) FROM expenses GROUP BY category")
    data = c.fetchall()
    total_spending = sum([row[1] for row in data])  # Calculate the total spending
    conn.close()

    # Generate the pie chart
    labels = [row[0] for row in data]
    values = [row[1] for row in data]
    fig, ax = plt.subplots()
    ax.pie(values, labels=labels, autopct='%1.1f%%')
    ax.axis('equal')
    ax.set_title(f'–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_spending:.2f}')  # Add the total spending as the title of the pie chart
    plt.savefig('pie.png')

    # Send the pie chart as a photo
    context.bot.send_photo(chat_id=update.effective_chat.id, photo=open('pie.png', 'rb'))

    return ConversationHandler.END


def main():
    # Set up the Updater and add the handlers
    updater = Updater("YOUR_TOKEN", use_context=True)
    dp = updater.dispatcher
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CATEGORY: [CallbackQueryHandler(button)],
            AMOUNT: [MessageHandler(Filters.text, amount)]
        },
        fallbacks=[],
    )
    dp.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
